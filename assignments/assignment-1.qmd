---
title: "intr_R_assignment"
---

### TASK-1 : Video Review : **{gt} Table Battles \|\| Eurovision \|\| RStudio ( Posit PBCV) asdasddasd**

-   Jesse and Rich are having a little competition to create the Eurovision Song Contest Winners album. They will both take turns creating a table in R using the data containing the Competition Winners.

-   `https://liamdbailey.com/posts/2020-11-27-making-beautiful-tables-with-gt/` From there they received the data for free.

-   Jesse said that he wanted to use the flags and codes of the country and that they were all ready on the Liam D. Bailey site and that he spent 3 or 4 hours trying to do this. This part was a bit challenging. (It is necessary to have the files ready, then use the text conversion and then other image functions.)

-   She found the title by googling it with a beautiful font called "Rock Salt". (I will use this too.)

-   Since he wanted to have a table that responds to different inputs, he customized the table by adding "chose a country" and "chose a rank form 1 to 3" options with some coding. For example, when Germany is selected, Germany data appears. It is also possible to select multiple countries at the same time.

-   Rich created an animated painting by adding gifs he took from YouTube next to the songs. At the same time, the background of the "Eurovision" text in the title has a structure that slides and changes color.

-   ***I would never have thought that such things could be done with R. A truly impressive work has emerged.***

### ***TASK-2 : Differences between R and Python***

#### ***1- Syntax Difference***

##### **`Assignment Method`**

```{r}
my_name <- "Aykut Simsek"
print(my_name)
```

```{python}
myName = "Aykut Simsek"
print(myName)
```

#### ***2- Vectors and Lists***

One of the frequently used tools for storing data in Python is `list`. However, in the R language, `vector` are used to store data.

```{r}
# We can use c() function for creating a vector.
my_courses <- c("Data Anlytics", "Quality Management", "Material Science", "Probability and Statistics", "Production Planning and Control", "MUH101")
print(my_courses)
```

```{python}
# We can use [] for creating a list.
myCourses = ["Data Anlytics", "Quality Management", "Material Science", "Probability and Statistics", "Production Planning and Control", "MUH101"]
print(myCourses)
```

#### ***3- Indexing***

```{r}
my_favorite_teacher <- "Erdi Dasdemir"
# It is a real information
my_favorite_teacher[0]   # -> character(0), did not give us "E"

my_numbers <- c(1, 10, 100, 1000)
my_numbers[1]            # -> first element
my_numbers[1:3]          # -> 1 and 3 both included
```

```{python}
myFavoriteTeacher = "Erdi Dasdemir"
# It is a real information
myFavoriteTeacher[0]      # -> gives us "E"

myNumbers = (1, 10, 100, 1000)
myNumbers[0]             # -> first element
myNumbers[1]             # -> second element (not first)
myNumbers[1:3]           # -> 1 included and 3 excluded
```

### ***TASK-3 : NA Example***

```{r}
library("dslabs")
data(na_example)
print(na_example)

number_of_na <- sum(is.na(na_example))
print(number_of_na)
cat("Bu vektorde toplam", number_of_na, "adet NA bulunmaktadır")
```

-   *Python'da yaptığımız gibi print içerisinde string ve değişkeni aynı anda R'da ekrana yazdıramadım.*

-   *ChatGPT'ye "R dilinde tek parantez içinde hem bir değişken hem bir character türünü ekrana yazdırabileceğimiz bir fonksiyon bulunuyor mu?" diye sordum.*

-   \*`degisken <- 42     character <- "Merhaba, Dünya!"`

    Değişken ve karakter türünü tek parantez içinde ekrana verdirme: `cat("Değişken: ", degisken, " Karakter: ", character, "\n")`\*

-   *Bu çıktıyı aldım ve R'da bu işlev için `cat()` fonksiyonunu kullanmamız gerektiğini öğrendim.*

```{r}
library("dslabs")
data(na_example)

naless_example <- ifelse(is.na(na_example), 0, na_example)

print(naless_example)

```

-   NA'lar yerine "0" ekleyemediğim için ChatGPT'den yardım aldım.

-   \# NA'ları 0 ile doldur na_example_filled \<- ifelse(is.na(na_example), 0, na_example)

-   Bu kod, **`is.na`** fonksiyonuyla **`na_example`** veri çerçevesindeki **`NA`** değerlerini kontrol eder ve **`ifelse`** ile **`NA`** değerlerini 0 ile değiştirir. Ardından, **`na_example_filled`** adlı yeni bir veri çerçevesi veya vektör oluşturulur ve **`NA`** değerleri 0 ile değiştirilmiş şekilde görüntülenir.
